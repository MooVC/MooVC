trigger:
- master
- develop
- release/*
- feature/*
- hotfix/*

schedules:
  - cron: "0 3 * * *"
    displayName: Nightly Build
    branches:
      include:
        - develop
        - feature/*
        - hotfix/*
        - master
        - release/*
    always: true

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  solution: '**/*.sln'
  versions: '-p:AssemblyVersion="$(GitVersion.AssemblySemVer)" -p:FileVersion="$(GitVersion.AssemblySemFileVer)" -p:InformationalVersion="$(GitVersion.InformationalVersion)" -p:PackageVersion="$(GitVersion.NuGetVersion)" -p:Version="$(GitVersion.AssemblySemVer)'

steps:
- checkout: self
  clean: true
  persistCredentials: true

- task: gitversion/setup@0
  displayName: 'Versioning Installation'
  inputs:
    versionSpec: '5.x'

- task: gitversion/execute@0
  condition: succeeded()
  displayName: 'Version Determination ($(buildConfiguration))'
  inputs:
    useConfigFile: true
    configFilePath: './gitversion.yml'

- task: UseDotNet@2
  condition: succeeded()
  displayName: 'Use .NET 6 Core SDK'
  inputs:
    packageType: 'sdk'
    version: '6.x'
        
- task: DotNetCoreCLI@2
  condition: succeeded()
  displayName: 'Restore Nuget Packages for Solution'
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    projects: '$(solution)'

- task: DotNetCoreCLI@2
  condition: succeeded()
  displayName: 'Build Solution'
  inputs:
    arguments: '--configuration $(buildConfiguration) --no-restore $(versions)'
    command: 'build'
    projects: '$(solution)'

- task: DotNetCoreCLI@2
  condition: succeeded()
  displayName: 'Test Solution'
  inputs:
    arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:ExcludeByAttribute=CompilerGeneratedAttribute /p:ExcludeByAttribute=GeneratedCodeAttribute /p:ExcludeByAttribute=Obsolete /p:ExcludeByFile=\"**/*.Designer.cs\"'
    command: 'test'
    projects: '$(solution)'

- task: reportgenerator@4
  condition: succeeded()
  displayName: 'Generate Coverage Report'
  inputs:
    reports: '$(Build.SourcesDirectory)/**/*.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)/Coverage'

- task: PublishCodeCoverageResults@1
  condition: succeeded()
  displayName: 'Publish Code Coverage'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/Coverage/Cobertura.xml'
    failIfCoverageEmpty: true

- task: DotNetCoreCLI@2
  condition: succeeded()
  displayName: 'Package Artifacts'
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj;!**/*.Tests.csproj'
    versionEnvVar: 'GitVersion.NuGetVersion'
    versioningScheme: 'byEnvVar'

- task: CopyFiles@2
  condition: succeeded()
  displayName: 'Copy Packages for Publish'
  inputs:
    contents: '**/*.*nupkg'
    targetFolder: '$(Build.ArtifactStagingDirectory)/Packages'
    sourceFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  condition: succeeded()
  displayName: 'Publish Build Artifacts'
  inputs:
    artifactName: 'drop'
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/Packages'
    publishLocation: 'Container'