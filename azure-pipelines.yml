trigger:
- master
- develop
- release/*
- feature/*
- hotfix/*

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  solution: '**/*.sln'
  versions: '-p:AssemblyVersion="$(GitVersion.AssemblySemVer)" -p:FileVersion="$(GitVersion.AssemblySemFileVer)" -p:InformationalVersion="$(GitVersion.InformationalVersion)" -p:PackageVersion="$(GitVersion.NuGetVersion)" -p:Version="$(GitVersion.AssemblySemVer)'

steps:
- checkout: self
  clean: true
  persistCredentials: true

- task: GitVersion@5
  displayName: 'Version Management'
  inputs:
    configFilePath: 'gitversion.yml'
    runtime: 'core'

- task: DotNetCoreCLI@2
  displayName: 'Restore Nuget Packages for Solution'
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    projects: '$(solution)'
    
- task: DotNetCoreCLI@2
  displayName: 'Build Solution'
  inputs:
    arguments: '--configuration $(buildConfiguration) --no-restore $(versions)'
    command: 'build'
    projects: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: 'Test Solution'
  inputs:
    arguments: '--configuration $(buildConfiguration) --collect "Code Coverage"'
    command: 'test'
    projects: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: 'Package Artifacts'
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    versionEnvVar: 'GitVersion.NuGetVersion'
    versioningScheme: 'byEnvVar'

- task: CopyFiles@2
  displayName: 'Copy Packages for Publish'
  inputs:
    contents: '**/*.nupkg'
    targetFolder: '$(Build.ArtifactStagingDirectory)/Packages'
    sourceFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts'
  inputs:
    artifactName: 'drop'
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/Packages'
    publishLocation: 'Container'